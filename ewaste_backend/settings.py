"""
Django settings for ewaste_backend project.
Generated by 'django-admin startproject' using Django 5.2.
"""

from pathlib import Path
import os
import dj_database_url # Import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- SENSITIVE DATA: LOAD FROM ENVIRONMENT VARIABLES IN PRODUCTION ---
# SECURITY WARNING: keep the secret key used in production secret!
# On Render, set DJANGO_SECRET_KEY as an environment variable.
# The default here is for local development fallback ONLY.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-$3w=2n^3z7)5i9xy&o))k3%l2r7#u7$ezh*nxx6@iq#^7u@7d-')

# SECURITY WARNING: don't run with debug turned on in production!
# On Render, set DJANGO_DEBUG to 'False'.
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True' # This will be 'True' if not set, 'False' if set to 'False'

# ALLOWED_HOSTS for production. On Render, set DJANGO_ALLOWED_HOSTS to your Render URL (e.g., waste-backend-aufb.onrender.com)
ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '').split(',') # Split by comma to handle multiple hosts if needed (though usually one for Render)

# Gemini API Key - IMPORTANT: Store this as an environment variable on Render!
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY') # Retrieve from environment variable


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # For DRF API
    'core',  # Your app for e-waste management
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Add WhiteNoise for serving static files in production
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ewaste_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # DIRS: This tells Django where to look for project-level templates.
        # It's common to have a 'templates' folder directly under your project root (where manage.py is).
        # So, make sure your index.html is located at 'ewaste_backend/templates/index.html'
        # If your index.html is actually in 'ewaste_backend/core/templates/index.html',
        # you might try 'DIRS': [BASE_DIR / 'core/templates'] or simply rely on APP_DIRS=True.
        # However, for a general project template, BASE_DIR / 'templates' is robust.
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True, # This tells Django to look for 'templates' folder inside each installed app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Essential for debug context
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ewaste_backend.wsgi.application'

# Database
# Use PostgreSQL in production (Render) via DATABASE_URL environment variable.
# Keep SQLite as a fallback for local development if DATABASE_URL is not set.
DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{os.path.join(BASE_DIR, "db.sqlite3")}', # f-string for Path object conversion
        conn_max_age=600 # Recommended for persistent connections in production
    )
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/' # Ensure leading slash
STATICFILES_DIRS = [BASE_DIR / "static"] # For collecting static files from non-app directories
STATIC_ROOT = BASE_DIR / "staticfiles" # Directory where 'collectstatic' will put all static files for production

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# =======================
# EMAIL BACKEND SETTINGS
# =======================
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('EMAIL_HOST_ENV', 'smtp.gmail.com') # Using improved env var name
EMAIL_PORT = int(os.environ.get('EMAIL_PORT_ENV', 587)) # Cast to int, using improved env var name
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS_ENV', 'True') == 'True' # Using improved env var name
# IMPORTANT: These should ONLY come from environment variables in production.
# NO HARDCODED FALLBACKS for sensitive credentials here.
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER_ENV')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD_ENV')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL_ENV', EMAIL_HOST_USER) # Default to EMAIL_HOST_USER if not set

# =======================
# REST FRAMEWORK SETTINGS (optional, for DRF customization)
# =======================
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ]
}